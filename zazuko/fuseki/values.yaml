# yaml-language-server: $schema=values.schema.json

# Storage configuration (for persistent storage)
storage:
  # -- enabled tells if the storage should be enabled
  enabled: true
  # -- size is the size of the storage to use
  size: 10Gi
  # -- storageClass is the storage class to use
  storageClass: ""
  # -- accessMode is the access mode to use
  accessMode: ReadWriteOnce
  # -- existingClaim is the name of an existing PVC to use
  existingClaim: ""
  # -- mountPath is the path to mount the storage
  mountPath: /fuseki/databases/ds/

# Configuration
config:
  # -- adminPassword is the password for the admin user
  adminPassword: admin
  # -- javaOpts is the Java options to use
  javaOpts: "-Xmx2048m -Xms2048m"
  # -- disableOtel tells if OpenTelemetry should be disabled
  disableOtel: true

# -- extraEnv is a list of extra environment variables to set
extraEnv:
  []
  # - name: MY_ENV_VAR
  #   value: my-value

# -- replicaCount is the number of replicas to deploy
replicaCount: 1

# Update strategy configuration
updateStrategy:
  # -- type is the type of update strategy to use
  type: RollingUpdate

# Information about the Fuseki Docker image to use.
# In case you want to use a custom image, you can set the repository and tag here.
image:
  # -- repository is the Docker image to use
  repository: ghcr.io/zazuko/fuseki-geosparql
  # -- pullPolicy is the policy to use when pulling the image
  pullPolicy: IfNotPresent
  # -- tag is used to overrides the image tag whose default is the chart appVersion
  tag: ""

# -- imagePullSecrets used to pull the Docker image
imagePullSecrets: []
# -- nameOverride overrides the chart name
nameOverride: ""
# -- fullnameOverride overrides the full name of the chart
fullnameOverride: ""

# Service account configuration
serviceAccount:
  # -- create tells if a service account should be created
  create: false
  # -- automount tells if the service account should be automounted
  automount: true
  # -- annotations to add to the service account
  annotations: {}
  # -- name is the name of the service account to use
  name: ""

# -- podAnnotations to use
podAnnotations: {}
# -- podLabels to use
podLabels: {}

# Pod security context configuration
podSecurityContext:
  # -- fsGroup is the group ID to run the container as
  fsGroup: 1000
  # -- runAsGroup is the group ID to run the container as
  runAsGroup: 1000
  # -- runAsNonRoot tells if the container should run as a non-root user
  runAsNonRoot: true
  # -- runAsUser is the user ID to run the container as
  runAsUser: 1000

# Security context configuration
securityContext:
  # -- allowPrivilegeEscalation tells if the container can request to allow privilege escalation
  allowPrivilegeEscalation: false
  # -- capabilities to add/drop
  capabilities: {}
  # -- privileged tells if the container is privileged
  privileged: false
  # -- runAsNonRoot tells if the container should run as a non-root user
  runAsNonRoot: true
  # -- runAsUser is the user ID to run the container as
  runAsUser: 1000
  # -- readOnlyRootFilesystem tells if the container should have a read-only root filesystem
  readOnlyRootFilesystem: false
  # -- seLinuxOptions to add
  seLinuxOptions: {}

# Service configuration
service:
  # -- type is the type of service to create
  type: ClusterIP
  # -- port is the port the service will listen on
  port: 3030

# Ingress configuration
ingress:
  # -- enabled allows you to enable or disable the Ingress
  enabled: false
  # -- className is the ingress class to use
  className: ""
  # -- annotations to add to the Ingress
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- hosts is the list of hostnames to be exposed
  hosts:
    []
    # - host: fuseki-example.local
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific
  # -- tls is the list of TLS configuration
  tls: []
  #  - secretName: fuseki-example-tls
  #    hosts:
  #      - fuseki-example.local

# -- resources to request for the pod
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- livenessProbe is a health check to determine if the container is still running
livenessProbe:
  httpGet:
    path: "/$/ping"
    port: http

# -- readinessProbe is a health check to determine if the container is ready to serve traffic
readinessProbe:
  httpGet:
    path: "/$/ping"
    port: http

# Configure autoscaling
autoscaling:
  # -- enabled allows you to enable or disable autoscaling
  enabled: false
  # -- minReplicas is the minimum number of replicas that will be set when autoscaling is enabled
  minReplicas: 1
  # -- maxReplicas is the maximum number of replicas that will be set when autoscaling is enabled
  maxReplicas: 100
  # -- targetCPUUtilizationPercentage is the target average CPU utilization across all pods
  targetCPUUtilizationPercentage: 80
  # -- targetMemoryUtilizationPercentage is the target average memory utilization across all pods
  targetMemoryUtilizationPercentage: 80

# -- volumes to mount on the output Deployment definition
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- volume mounts to use
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- nodeSelector to use
nodeSelector: {}

# -- tolerations to use
tolerations: []

# -- affinity to use
affinity: {}
