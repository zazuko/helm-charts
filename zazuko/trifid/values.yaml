# yaml-language-server: $schema=values.schema.json

# Information about the SPARQL endpoint
sparql:
  # -- URL of the SPARQL endpoint (required)
  endpoint: "http://example.com/query"
  # -- Username for the SPARQL endpoint
  username: ""
  # -- Password for the SPARQL endpoint
  password: ""

# Changes to the Trifid configuration
config:
  # -- Override the path to the Trifid configuration file
  file: ""

# Set the base URL for the dataset, to allow some rewriting features
dataset:
  # -- Base URL for the dataset
  baseUrl: ""

# -- Number of replicas
replicaCount: 1

# Information about the Trifid Docker image to use.
# In case you want to use a custom image, you can set the repository and tag here.
image:
  # -- Docker image used to deploy the Trifid instance
  repository: ghcr.io/zazuko/trifid
  # -- Configure the imagePullPolicy, values could be: `Always`, `IfNotPresent`, `Never`
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- Additional environment variables to set
extraEnv:
  []
  # - name: MY_ENV_VAR
  #   value: my-value

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 1000

securityContext:
  # -- Run the container as a non-root user?
  runAsNonRoot: true
  # -- User ID to run the container as
  runAsUser: 1000
  # -- Capabilities to add/drop
  capabilities: {}
  # -- Is the filesystem read-only?
  readOnlyRootFilesystem: true

service:
  # -- Type of service to create (`ClusterIP`, `NodePort`, `LoadBalancer`, or `ExternalName`)
  type: ClusterIP
  # -- Port where Trifid is exposed
  port: 8080

ingress:
  # -- Enable Ingress
  enabled: false
  # -- Ingress class to use
  className: ""
  # -- Ingress annotations
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Ingress hosts
  hosts:
    - host: trifid-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # -- Ingress TLS configuration
  tls: []
  #  - secretName: trifid-example-tls
  #    hosts:
  #      - trifid-example.local

# -- Configure resource requests and limits
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Configure the liveness probe
livenessProbe:
  httpGet:
    path: /healthz
    port: http
# -- Configure the readiness probe
readinessProbe:
  httpGet:
    path: /healthz
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
